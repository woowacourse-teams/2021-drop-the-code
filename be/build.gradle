plugins{
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
}

group = 'com.wootech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenLocal()
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

ext {
    snippetsDir = file("$buildDir/generated-snippets")
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    jsondoclet
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'com.h2database:h2:1.4.199'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Spring Auto REST Docs
    testImplementation 'capital.scalable:spring-auto-restdocs-core:2.0.11'
    jsondoclet "capital.scalable:spring-auto-restdocs-json-doclet:2.0.11"
}

task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files as List
    options.doclet = "capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet"
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test {
    print("execute test\n")
    systemProperty "org.springframework.restdocs.outputDir", snippetsDir
    systemProperty "org.springframework.restdocs.javadocJsonDir", javadocJsonDir

    useJUnitPlatform()
}

asciidoctor { // 1
    print("execute asciidoctor\n")
    sourceDir = file("src/docs")
    outputDir = file("$buildDir/generated-docs")

    attributes "source-highlighter": "highlightjs", "snippets": snippetsDir

    // 문서화되는 과정을 로그로 보여준다
    logDocuments true
}

task copyDocument(type: Copy) { // 2
    print("execute copyDocument\n")
    dependsOn asciidoctor
    // 추후 추가
    from file("${asciidoctor.outputDir}")
    into file("src/main/resources/static/docs")
}

build {
    clean
    jsonDoclet
    asciidoctor
    test
    asciidoctor
    copyDocument
}
